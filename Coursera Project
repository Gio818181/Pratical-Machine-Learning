# Set libraries 

library(knitr)
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
library(corrplot)
library(RColorBrewer)


# Set the URL for the download from external link
UrlTrain <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
UrlTest  <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"

# Download the datasets
training_data <- read.csv(url(UrlTrain))
testing_data  <- read.csv(url(UrlTest))

# Create a partition with the training dataset 
set.seed(14042020)
inTrain  <- createDataPartition(training_data$classe, p=0.7, list=FALSE)
TrainDataSet <- training_data[inTrain, ]
TestDataSet  <- training_data[-inTrain, ]
dim(TrainDataSet)
dim(TestDataSet)

# Remove variables with Nearly Zero Variance
NZV <- nearZeroVar(TrainDataSet)
TrainDataSet <- TrainDataSet[, -NZV]
TestDataSet  <- TestDataSet[, -NZV]
dim(TrainDataSet)
dim(TestDataSet)

# Remove variables which contain mostly missing value 

ColIndex <- colSums(is.na(TrainDataSet))/nrow(TrainDataSet) < 0.95
TrainDataSet <- TrainDataSet[,ColIndex]
TestDataSet <- TestDataSet[,ColIndex]
dim(TrainDataSet)
dim(TestDataSet)


# Remove first seven variables (columns 1 to 7)
TrainDataSet <- TrainDataSet[, -(1:7)]
TestDataSet  <- TestDataSet[, -(1:7)]
dim(TrainDataSet)
dim(TestDataSet)


# Correlation analysis

corMat <- cor(TrainDataSet[, -52])
corrplot(corMat, order = "FPC", method = "color", type = "lower", 
         tl.cex = 0.8, tl.col = rgb(0, 0, 0))

highlyCorr = findCorrelation(corMat, cutoff=0.9)

names(TrainDataSet)[highlyCorr]

#Decision Tree Model

set.seed(14042020)
decisionTreeModel <- rpart(classe ~ ., data=TrainDataSet, method="class")
fancyRpartPlot(decisionTreeMod)

predictTreeModel <- predict(decisionTreeModel, TestDataSet, type = "class")
ConfMatrixTree <- confusionMatrix(predictTreeModel, TestDataSet$classe)
ConfMatrixTree

plot(ConfMatrixTree$table, col = ConfMatrixTree$byClass, main = paste("Decision Tree Model - Confusion Matrix: Accuracy =", round(ConfMatrixTree$overall['Accuracy'], 4)))

#random forest model

set.seed(14042020)
TrainControlRF <- trainControl(method = "cv",
                        number = 3,
                        allowParallel = TRUE,
                        verboseIter = TRUE)
ModelFitRandomForest <- train(classe ~ ., data=TrainDataSet, method="rf",
                          trControl=TrainControlRF,ntree=100,importance=TRUE)
ModelFitRandomForest$finalModel

varImp(ModelFitRandomForest)

PredictRF <- predict(ModelFitRandomForest, newdata=TestSet)
ConfMatrixRF <- confusionMatrix(PredictRF, TestSet$classe)
ConfMatrixRF

plot(ConfMatrixRF$table, col = ConfMatrixRF$byClass, main = paste("Random Forest Model - Confusion Matrix: Accuracy =", round(ConfMatrixRF$overall['Accuracy'], 4)))

#Final prediction on Test data
predict(ModelFitRandomForest, newdata = testing_data)

